########### 1- installation
https://laravel.com/docs/11.x#creating-a-laravel-project

########## 2- Meet laravel architecuture
1- Desing patterns
https://refactoring.guru/design-patterns

###### 3- starting development server
php artisan serve


#### 4- play with routes
https://laravel.com/docs/11.x/routing

Don't forget names for your routes



--> restrict parameter type
https://laravel.com/docs/11.x/routing#parameters-regular-expression-constraints


##### 5- views in php
---> blade template engine
https://laravel.com/docs/11.x/blade
when you give name to your viewsfile --> .blade.php
# we implicity perfrom some tasks like the ones you can do with pure php files
blade directives
https://laravel.com/docs/11.x/blade#blade-directives




####### create default base layout for the application
this layout can be extended later in the other different pages

extending layouts
https://laravel.com/docs/11.x/blade#extending-a-layout



# serving static images


################################# Using contoller

You can create php class for your controller ??


artisan command line tool ---> provide command --> create controller ??
php artisan make:controller StudentController




############################# Lab01
create pages that allow us to  make CRUD operation on Posts

- All Posts is a link that redirect back to /posts route

- Use blade layout to not duplicate navbar across view files

- make sure to follow the naming convension
    /posts
    /posts/{id}  --> show
    /posts/{id}/edit --> edit
    /posts/{id}/ delete --> delete

- make sure use names for your created routes















********************** day02 *********************************
1- connect our laravel app with db --> db mysql

1- set connection credits
username : assuit
password: iti_123456789_
db_name : laravel_assuit
host:localhost
port:3306

2- use php artisan migrate to apply new changes to the db.

----------------------------------------------

students --> use migration files to create table students ??
    id
    name
    email
    gender
    grade

-generate migration file
https://laravel.com/docs/11.x/migration

-column types
https://laravel.com/docs/11.x/migrations#available-column-types

php artisan migrate

-- generate model class
https://laravel.com/docs/11.x/eloquent#generating-model-classes


### how to get / post data to the db???


## query builder
https://laravel.com/docs/11.x/queries#main-content

# using models
https://laravel.com/docs/11.x/eloquent#retrieving-single-models


#csrf and create new object
https://laravel.com/docs/11.x/csrf#main-content

# rest of crud on objects
create / insert
https://laravel.com/docs/11.x/eloquent#inserts

edit

delete ///
https://laravel.com/docs/11.x/eloquent#deleting-models

***************** uploading files on server


*********************** lab02
= add image to your post --> upload
1- create migration file for posts table
2- perform all crud operations on posts
3- search about carbon date
    so when you display create at in index
4- search about pagination ==> make sure that you can only display 3 posts per page










****************************************
# use resource controller ??
generate basic function we need to better and speed up dealing with resource
php artisan make:controller StudentController -r

php artisan make:controller StudentController --model=Student
 this generated new resource controller and connected it with the model

 You can generate routes automatically ??
 Route::resource("students", StudentContoller::class);


 request methods     url                                                                  name of url         function used by controller

  GET|HEAD        students ................................................................ students.index › StudentController@index
   POST            students .............................................................. students.store › StudentController@store
   GET|HEAD        students/create ....................................................... students.create › StudentController@create
   GET|HEAD        students/{student}............................................................ students.show › StudentController@show
   PUT|PATCH       students/{student} ................................................... students.update › StudentController@update
   DELETE          students/{student} .................................................. students.destroy › StudentController@destroy
   GET|HEAD        students/{student}/edit .............    .......................... students.edit › StudentController@edit


rest methods
    --> adding new object post
    --> show object/ all object get
    --> update object --> put
    --> delete object ===> delete



browsers know only GET, POST

when you are sending data to the model using create function --> you sending mass of data
mass assignment  ---? You must specify the keys you need to pass to the object


# validate forms ???
how to use validation
https://laravel.com/docs/11.x/validation#quick-writing-the-validation-logic

validation rules
https://laravel.com/docs/11.x/validation#available-validation-rules



############## connect student with track -=->
implement relation one to many
one track has many students
one student studies only in on track
 php artisan make:model Track -r -m
#### level db ?? using migration files
create column track_id added to students table --> track reference tracks



define relation between student and track --> on the level of model ??
student belongs to one track

https://laravel.com/docs/11.x/eloquent-relationships#one-to-many

######################################################################
generate 100 student with dummy data --->

using factories
generate new factory class for student  ???




































###################### Lab03 #################
1- connect model of user with model of the post
    --> post has only one post creator
 - In Edit Or Create Post Creator Field must be drop down list of users
-when I create new post --> I will choose the post creator from drop down

--> modify PostController to be resource controller
--> apply this validation on post
- Title & description are required , minimum length for title is 3
chars and unique, for description the minimum length is 10
chars ,make sure when updating post without changing Title
it still works
Also make sure that no one hacks you and send an id of post
creator that doesn’t exist in the database

- Make sure to display error messages of failed validation
https://laravel.com/docs/master/validation#quick-displayin
g-the-validation-errors


------------------------------------------
- When i Click on Delete you must show a warning before deleting and i choose
between yes to confirm Delete or no

- In Index & Show page ,make sure the Created At is formated , so read carbon
documentation https://carbon.nesbot.com/docs/


- Create PostSeeder & PostFactory class so that when i run php artisan db:seed it
seeds posts table with 500 records

---------------- soft delete

Add restore button on index page to restore deleted posts you will
need to use soft delete
https://laravel.com/docs/master/eloquent#soft-deleting

-----------------
- create Accessor Method inside Post Model that returns human readable carbon to
be used in posts/{id} , for example i want $post->human_readable_date will result in
the formated carbon date that is rendered in show post page
https://laravel.com/docs/master/eloquent-mutators#defining-an-accessor


-------

- Add comments to post using polymorphic relation and also we need to show who
commented on post
https://laravel.com/docs/master/eloquent-relationships#polymorphic-relationships


******************* day04 ***********************
split operations applied on request from controller ?

--> laravel provides request classes?
    >>> seperate logic of request on it ??





































